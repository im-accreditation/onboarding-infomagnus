name: New User Onboarding

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'New user GitHub username'

jobs:
  create_repo_and_assign_issues:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Create repository for new user
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUBB_TOKEN }}
        script: |
          const repoName = 'onboarding-offboarding-' + new Date().getTime()
          const response = await github.repos.createForAuthenticatedUser({ name: repoName })
          console.log(response.data.html_url)
          core.setOutput('repo_url', response.data.html_url)

    - name: Assign issues based on documentation
      uses: actions/github-script@v3
      env:
        USERNAME: ${{ github.event.inputs.username }}
      with:
        github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        script: |
          const octokit = require('@octokit/rest')();
          octokit.authenticate({
            type: 'token',
            token: process.env.GITHUB_TOKEN
          });
          const { data: issues } = await octokit.issues.listForRepo({
            owner: process.env.GITHUB_REPOSITORY.split('/')[0],
            repo: process.env.GITHUB_REPOSITORY.split('/')[1]
          });
          const { data: documentation } = await octokit.repos.getContents({
            owner: process.env.GITHUB_REPOSITORY.split('/')[0],
            repo: process.env.GITHUB_REPOSITORY.split('/')[1],
            path: 'docs'
          });
          const assignees = [process.env.USERNAME];
          issues.forEach(issue => {
            documentation.forEach(file => {
              if (issue.title.toLowerCase().includes(file.name.toLowerCase())) {
                octokit.issues.addAssignees({
                  owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                  repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                  issue_number: issue.number,
                  assignees
                });
              }
            });
          });
